Hopefully I copied down your code correctly.
But your programme gave a segmentation fault.
Refer to the valgrind report below if it helps.

***Code (transferred from photo)***
#include <bits/stdc++.h>
using namespace std;
bool is_prime(long long n) {

    long long i = 2;
    while (i*i <= n) {

		if (n % i == 0) {

	    	return false;
		}
		i += 1;
    }
    return true;
}
int main() {

    long long arr[10000];
    long long error=0;
    for(long long i=0;i<100000;i++)arr[i]=i*i+i+1;
    for(long long i=1;i<100000;i++)
    {
		if (is_prime(arr[i])==false)error++;
		else cout<<i-error<<": "<<arr[i]<<endl;
    }
}

***Report from Valgrind***
==3576== Memcheck, a memory error detector
==3576== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3576== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==3576== Command: ./jiahe
==3576== 
==3576== Invalid write of size 8
==3576==    at 0x108A1B: main (in /home/wang-rongfei/Documents/2h_programming_challenge/feb_0/jiahe)
==3576==  Address 0x1fff001000 is not stack'd, malloc'd or (recently) free'd
==3576== 
==3576== 
==3576== Process terminating with default action of signal 11 (SIGSEGV)
==3576==  Access not within mapped region at address 0x1FFF001000
==3576==    at 0x108A1B: main (in /home/wang-rongfei/Documents/2h_programming_challenge/feb_0/jiahe)
==3576==  If you believe this happened as a result of a stack
==3576==  overflow in your program's main thread (unlikely but
==3576==  possible), you can try to increase the size of the
==3576==  main thread stack using the --main-stacksize= flag.
==3576==  The main thread stack size used in this run was 8388608.
==3576== 
==3576== HEAP SUMMARY:
==3576==     in use at exit: 0 bytes in 0 blocks
==3576==   total heap usage: 1 allocs, 1 frees, 72,704 bytes allocated
==3576== 
==3576== All heap blocks were freed -- no leaks are possible
==3576== 
==3576== For counts of detected and suppressed errors, rerun with: -v
==3576== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
